name: Build and Release

on:
  push:
    {}
#    tags:
#      - '*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
#      - name: Install CMake
#        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
#      - name: Install ninja
#        run: choco install ninja
#      - uses: actions/checkout@v4
#      - name: build
#        run: cmake -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_C_FLAGS="-Wall -Werror -pedantic-errors -lm -g" && mkdir build && cmake --build .\build -j 10 && ls && ls build

#      - name: foo
#        run: ls
#      - name: Build & Test
#        uses: ashutoshvarma/action-cmake-build@master
#        with:
##          build-dir: ${{ runner.workspace }}/build
#          # will set the CC & CXX for cmake
#          target: all
#          cc: gcc
#          cxx: g++
#          build-type: Release
#          # Extra options pass to cmake while configuring project
#          configure-options: -DCMAKE_C_FLAGS=-w32 -DPNG_INCLUDE=OFF
#          run-test: false
##            ctest-options: -R mytest
#          # install the build using cmake --install
#          install-build: true
#          # run build using '-j [parallel]' to use multiple threads to build
#          parallel: 14
      - uses: lukka/get-cmake@latest
      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
      - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
        uses: lukka/run-cmake@v10
        with:
          # This is the default path to the CMakeLists.txt along side the
          # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
          # located elsewhere.
          # cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

          # You could use CMake workflow presets defined in the CMakePresets.json
          # with just this line below. Note this one cannot be used with any other
          # preset input, it is mutually exclusive.
          # workflowPreset: 'workflow-name'

          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended to the cmake command.
          # This is useful to reduce the number of CMake's Presets since you can reuse
          # an existing preset with different variables.
#          configurePresetAdditionalArgs: "['-DENABLE_YOUR_FEATURE=1']"

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended when building, for example to specify the
          # configuration to build.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          buildPresetAdditionalArgs: "['--config Release']"

          # This is the name of the CMakePresets.json's configuration to test the project with.
          testPreset: 'ninja-multi-vcpkg'
          # Additional arguments can be appended when testing, for example to specify the config
          # to test.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          testPresetAdditionalArgs: "['--config Release']"

      - name: Zip up output
        run: |
          cd build
          Compress-Archive -Path . -DestinationPath ../student_test.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Upload Windows Zip
          path: student_test.zip